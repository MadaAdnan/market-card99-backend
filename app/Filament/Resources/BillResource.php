<?php

namespace App\Filament\Resources;

use App\Enums\BillStatusEnum;
use App\Filament\Resources\BillResource\Pages;
use App\Filament\Resources\BillResource\RelationManagers;
use App\FromApi\As7ab;
use App\FromApi\CachBack;
use App\FromApi\Drd3;
use App\FromApi\EkoCard;
use App\FromApi\Juneed;
use App\FromApi\LifeCash;
use App\FromApi\Mazaya;
use App\FromApi\SaudCard;
use App\FromApi\SpeedCard;
use App\Models\Balance;
use App\Models\Bill;
use App\Models\Setting;
use App\Models\User;
use App\Notifications\SendNotificationDB;
use App\Rpositories\BillRepository;
use Closure;
use Filament\Forms;
use Filament\Notifications\Notification;
use Filament\Resources\Form;
use Filament\Resources\Resource;
use Filament\Resources\Table;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Saadj55\FilamentCopyable\Tables\Columns\CopyableTextColumn;

class BillResource extends Resource
{
    protected static ?string $model = Bill::class;

    protected static ?string $navigationIcon = 'heroicon-o-document-text';
    protected static ?string $label = 'الطلبات';
    protected static ?string $navigationLabel = 'الطلبات';
    protected static ?string $pluralLabel = 'الطلبات';
    protected static ?string $navigationGroup = 'الطلبات';
    protected static ?int $navigationSort = 2;

   public static function canViewAny(): bool
   {
       return auth()->user()->hasRole('super_admin'); // TODO: Change the autogenerated stub
   }

    protected static function shouldRegisterNavigation(): bool
    {
        return auth()->user()->hasRole('super_admin'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('id')->label('#')->searchable(isIndividual: true)->sortable()->searchable(isIndividual: true)->toggleable(),
                Tables\Columns\TextColumn::make('id_bill')->label('رقم الطلب')->searchable(isIndividual: true)->sortable()->extraCellAttributes(['class' => 'border','style'=>'font-size:10px'])->toggleable(),
                Tables\Columns\TextColumn::make('user.name')->label('اسم الزبون')->searchable(isIndividual: true)->extraCellAttributes(['class' => 'border'])->toggleable(),
                Tables\Columns\TextColumn::make('product.name')->label('اسم المنتج')
                    ->description(fn($record) => number_format($record->price - $record->ratio, 2))
                    ->searchable(isIndividual: true)->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px;color:#F60'])->toggleable(),
//                Tables\Columns\TextColumn::make('cost')->label('سعر التكلفة')->visible(fn() => auth()->user()->email == 'admin@admin.com')->extraCellAttributes(['class' => 'border'])->toggleable(),
//                Tables\Columns\TextColumn::make('price')->label('السعر')->formatStateUsing(fn($record) => number_format($record->price - $record->ratio, 2))->extraCellAttributes(['class' => 'border']),
                Tables\Columns\TextColumn::make('data_id')->label('الرد')->searchable(isIndividual: true)->color('warning')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])->toggleable(),

                Tables\Columns\TextColumn::make('customer_id')->label('Phone/ID')->searchable(isIndividual: true)->color('warning')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])->toggleable(),
//                Tables\Columns\TextColumn::make('data_id')->label('بيانات')->searchable(isIndividual: true)->extraCellAttributes(['class' => 'border'])->toggleable(),
                Tables\Columns\TextColumn::make('customer_name')->searchable(isIndividual: true)->formatStateUsing(fn($record) => 'Username : '.($record->customer_name ?? $record->customer_username))
                    ->description(fn($record)=>' Pass : '.$record->customer_password)
                    ->label('اسم المستخدم')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px;color:#F60']),
//                Tables\Columns\TextColumn::make('customer_password')->label('كلمة المرور')->searchable(isIndividual: true)->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])->toggleable(),
                Tables\Columns\TextColumn::make('amount')->label('الكمية')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])->toggleable(),
                Tables\Columns\TextColumn::make('customer_note')->label('ملاحظات الزبون')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])->toggleable()->size('sm'),

                Tables\Columns\BadgeColumn::make('status')
                    ->formatStateUsing(fn($record) => $record->status->status())->color(fn($record) => $record->status->color())
                    ->label('الحالة')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])
                    ->size('sm'),

                Tables\Columns\TextColumn::make('created_at')->date('Y-m-d h:i a')
                    ->label('تاريخ الطلب')->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap;font-size:13px'])
                    ->toggleable()->size('sm'),
                Tables\Columns\TextColumn::make('api_id')->label('Api-NO')
                    ->searchable(isIndividual: true)->extraCellAttributes(['class' => 'border','style'=>'text-wrap:wrap'])
                    ->description(fn($record)=>'الموقع : '.$record->api)->size('sm')
                    ->toggleable()->visible(auth()->user()->hasRole('super_admin')),
//                Tables\Columns\TextColumn::make('api')->label('Api')->extraCellAttributes(['class' => 'border'])->toggleable()->visible(auth()->user()->hasRole('super_admin')),
//                Tables\Columns\TextColumn::make('note')->label('الرد')->formatStateUsing(fn($record) => $record->data_id ?? $record->cancel_note ?? '')->extraCellAttributes(['class' => 'border'])->toggleable()->visible(auth()->user()->hasRole('super_admin')),
                Tables\Columns\TextColumn::make('black_id')->formatStateUsing(fn($record)=>$record->black_id!=null?$record->black?->info:'')->label('القائمة السوداء')->extraCellAttributes(fn($record)=>$record->black_id!=null?['class' => 'border','style'=>'text-wrap:wrap ;background-color:#FF000055;color:#000']:['class' => 'border','style'=>'text-wrap:wrap '])->size('sm')
                    ->color('black')->toggleable()->visible(auth()->user()->hasRole('super_admin')),

            ])->defaultSort('created_at', 'desc')
            ->filters([
                Tables\Filters\SelectFilter::make('status')->label('الحالة')->searchable()->options([
                    BillStatusEnum::PENDING->value => 'بالإنتظار',
                    BillStatusEnum::COMPLETE->value => 'منتهي',
//                    BillStatusEnum::SUCCESS->value=>'منتهي',
                    BillStatusEnum::CANCEL->value => 'ملغي',
                    BillStatusEnum::REQUEST_CANCEL->value => 'طلب إلغاء',
                ])->default(BillStatusEnum::PENDING->value),
                Tables\Filters\SelectFilter::make('api')->label('Api')->searchable()->options([
                    'life-cash' => 'لايف كاش',
                    'juneed' => 'جنييد',
                    'eko' => 'إيكو',
                    'speed-card' => 'سبيد كارد',
                    'saud' => 'سعود',
                    'as7ab' => 'أصحاب',
                    'mazaya' => 'مزايا',
                    'cache-back'=>'كاش باك'
                ])
            ])
            ->actions([
                ################ Retry Api ######################
                Tables\Actions\Action::make('api')->requiresConfirmation()->label('إعادة الطلب من Api')
                    ->action(function ($record) {
                    if ($record->product->api == 'life-cash') {
                        $service = new LifeCash(getSettingsModel());
                    }//
                    elseif ($record->product->api == 'speed-card') {
                        $service = new SpeedCard(getSettingsModel());
                    }//
                    elseif ($record->product->api == 'drd3') {
                        $service = new Drd3(getSettingsModel());
                    }//
                    elseif ($record->product->api == 'saud') {
                        $service = new SaudCard(getSettingsModel());
                    }//
                    elseif($record->product->api =='eko') {
                        $service = new EkoCard(getSettingsModel());
                    } elseif($record->product->api =='as7ab') {
                        $service = new As7ab(getSettingsModel());
                    }elseif($record->product->api =='mazaya') {
                        $service = new Mazaya(getSettingsModel());

                    }elseif($record->product->api =='cache-back') {
                        $service = new CachBack(getSettingsModel());

                    }elseif ($record->product->api == 'juneed') {
                        $service = new Juneed(getSettingsModel());
                    }
                    $bill=$record;
                    \DB::beginTransaction();
                    try {
                        if ($record->product->is_free) {
                         $bill= $service->buyFromApiFree($bill);

                        } else {
                          $bill=  $service->buyFromApiFixed($bill);
                        }
                        if ($bill->api_id != null) {
                            $bill->api = $bill->product->api;
                        } else {
                            throw new \Exception('لم يتم الطلب يرجى المحاولة من جديد');
                        }
                        $record->save();
                        \DB::commit();
                        Notification::make('success')->success()->title('تم الطلب من Api')->send();

                    }//
                    catch (\Exception | \Error $exception) {
                        \DB::rollBack();
                        Notification::make('error')->danger()->title('خطأ في الطلب')->body($exception->getMessage())->send();

                    }

                })->button()->color('secondary')
                    ->visible(fn($record) => $record->product->is_active_api && $record->api_id == null&&$record->black_id==null),
                ####################   Complete   ###################
                Tables\Actions\Action::make('complete')
                    ->form([
                        Forms\Components\TextInput::make('msg')->label('الرد')
                    ])
                    ->label('الموافقة على الطلب')->action(function ($record, $data) {
                        BillRepository::complateBill($record, $data['msg'] ?? '');
                        $record->invoice->update(['status' => BillStatusEnum::COMPLETE->value]);
                        Notification::make('success')->success()->title('نجاح العملبة')->body('تم ٌبول الطلب بنجاح')->send();

                    })->visible(fn($record) => $record->api_id == null &&$record->black_id==null)
                    ->requiresConfirmation()->color('success')->button(),
               Tables\Actions\ActionGroup::make([
                   Tables\Actions\Action::make('complete_api')
                       ->form([
                           Forms\Components\TextInput::make('msg')->label('الرد')
                       ])
                       ->label('الموافقة على الطلب')->action(function ($record, $data) {
                           BillRepository::complateBill($record, $data['msg'] ?? '');
                           $record->invoice->update(['status' => BillStatusEnum::COMPLETE->value]);
                           Notification::make('success')->success()->title('نجاح العملبة')->body('تم ٌبول الطلب بنجاح')->send();

                       })->visible(fn($record) => ($record->api_id == null || now()->greaterThan($record->created_at?->addMinutes(5)))&&$record->black_id==null)
                       ->requiresConfirmation()->color('success')->button(),
               ]),
                Tables\Actions\Action::make('remove')->label('إزالة من القائمة السوداء')
                    ->action(fn($record)=>$record->update(['black_id'=>null]))->visible(fn($record)=>$record->black_id!=null)
                    ->requiresConfirmation()->button(),
                ####################  Cancel  #######################
                Tables\Actions\Action::make('cancel')
                    ->label('إلغاء الطلب')
                    ->form([
                        Forms\Components\TextInput::make('msg')->label('الرد')
                    ])
                    ->action(function ($record, $data) {

                        \DB::beginTransaction();
                        try {
                            BillRepository::cancelBill($record, $data['msg'] ?? '');
                            $record->invoice->update(['status' => BillStatusEnum::CANCEL->value]);
                            \DB::commit();
                            Notification::make('success')->success()->title('نجاح العملبة')->body('تم إلغاء الطلب بنجاح')->send();
                        } catch (\Exception | \Error $e) {
                            \DB::rollBack();
                            Notification::make('error')->danger()->title('خطأ')->body($e->getMessage())->send();

                        }

                    })
                    ->visible(fn($record) => $record->api_id == null || ($record->status->value == BillStatusEnum::COMPLETE->value && !empty($record->api_id)))
                    ->requiresConfirmation()->color('danger')->button(),
                Tables\Actions\Action::make('complete-btn')->action(function ($record) {
                    if ($record->api == 'drd3') {
                        $record->update(['status' => BillStatusEnum::COMPLETE->value]);

                    }
                })->visible(fn($record) => $record->api == 'drd3')->label('إنهاء الطلب')->requiresConfirmation()->color('success')->button()
            ])
            ->headerActions([
                Tables\Actions\Action::make('order_status')->action(function(){
                    \Artisan::call('optimize:clear');
                    \Artisan::call('order:status');
                })->label('فحص')
            ])
            ->bulkActions([
//                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListBills::route('/'),
//            'create' => Pages\CreateBill::route('/create'),
//            'edit' => Pages\EditBill::route('/{record}/edit'),
        ];
    }
}
