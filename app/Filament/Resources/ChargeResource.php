<?php

namespace App\Filament\Resources;

use App\Enums\BillStatusEnum;
use App\Filament\Resources\ChargeResource\Pages;
use App\Filament\Resources\ChargeResource\RelationManagers;
use App\Models\Balance;
use App\Models\Charge;
use App\Models\Recharge;
use Filament\Forms;
use Filament\Notifications\Notification;
use Filament\Resources\Form;
use Filament\Resources\Resource;
use Filament\Resources\Table;
use Filament\Tables;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\DB;

class ChargeResource extends Resource
{
    protected static ?string $model = Recharge::class;
    protected static ?string $slug = 'charges';
    protected static ?string $navigationIcon = 'heroicon-o-currency-dollar';
    protected static ?string $label = 'طلبات الشحن';
    protected static ?string $navigationLabel = 'طلبات الشحن';
    protected static ?string $pluralLabel = 'طلبات الشحن';
    protected static ?string $navigationGroup = 'الإعدادات';
    protected static ?int $navigationSort = 1;

    protected static function getNavigationBadge(): ?string
    {
        return Recharge::where('status', 'pending')->count(); // TODO: Change the autogenerated stub
    }

    protected static function getNavigationBadgeColor(): ?string
    {
        return 'danger'; // TODO: Change the autogenerated stub
    }


    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('طلب الشحن')->schema([
                    Forms\Components\FileUpload::make('img')->disk('public')->label('الإشعار')->enableOpen(),
                    Forms\Components\SpatieMediaLibraryFileUpload::make('image')->collection('image')->conversion('webp')->label('الإشعار')->enableOpen(),

                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([

                Tables\Columns\SpatieMediaLibraryImageColumn::make('image')->collection('image')->conversion('webp')->openUrlInNewTab(),
                Tables\Columns\ImageColumn::make('img')->disk('public')->label('صورة')->openUrlInNewTab(true),
                Tables\Columns\TextColumn::make('user.name')->label('المستخدم'),
                Tables\Columns\TextColumn::make('bank.name')->label('طريقة التحويل'),
                Tables\Columns\TextColumn::make('value')->label('القيمة'),
                Tables\Columns\TextColumn::make('info')->label('ملاحظة'),
                Tables\Columns\TextColumn::make('status')->formatStateUsing(fn($record) => BillStatusEnum::tryFrom($record->status)?->status())->color(fn($record) => BillStatusEnum::tryFrom($record->status)?->color())->label('الحالة'),
                Tables\Columns\TextColumn::make('created_at')->date('Y-m-d h:i')->label('ملاحظة'),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\Action::make('active')->label('قبول الطلب')
                    ->form([
                        Forms\Components\TextInput::make('amount')->label('القيمة التي تريد شحنها للحساب')->numeric()->required()->minValue(0.1)->step(0.001)->maxValue(10000),
                        Forms\Components\TextInput::make('info')->label('ملاحظات')
                    ])
                    ->action(function ($record,$data) {
                        DB::beginTransaction();
                        try {
                            Balance::create([
                                'user_id' => $record->user_id,
                                'credit' => $data['amount'],
                                'debit' => 0,
                                'info' => $data['info'] . ' شحن عن طريق المدير ',
                                'total' => $record->balance + $data['amount'],
                                'ratio' => 0,
                            ]);
                            Notification::make('success')->success()->title('نجاح')->body('تم شحن الرصيد بنجاح')->send();
                            $record->update(['status' => BillStatusEnum::SUCCESS->value]);
                            DB::commit();
                        } catch (\Exception | \Error $e) {
                            DB::rollBack();
                        }

                    })->requiresConfirmation()->visible(fn($record) => $record->status == BillStatusEnum::PENDING->value)->button()->color('success'),
                Tables\Actions\Action::make('inactive')->label('رفض الطلب')->action(fn($record) => $record->update(['status' => BillStatusEnum::CANCEL->value]))->requiresConfirmation()->visible(fn($record) => $record->status == BillStatusEnum::PENDING->value)->button()->color('danger'),
                Tables\Actions\ViewAction::make()->button(),
            ])
            ->bulkActions([
//                Tables\Actions\DeleteBulkAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCharges::route('/'),
//            'create' => Pages\CreateCharge::route('/create'),
//            'edit' => Pages\EditCharge::route('/{record}/edit'),
        ];
    }
}
