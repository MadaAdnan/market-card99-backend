<?php

namespace App\Models;

use App\Enums\BillStatusEnum;
use App\Observers\BillObserve;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Carbon;

/**
 * App\Models\Bill
 *
 * @property int $id
 * @property int $user_id
 * @property int $invoice_id
 * @property int $category_id
 * @property int $product_id
 * @property string|null $cost
 * @property string|null $price
 * @property BillStatusEnum $status
 * @property string|null $customer_id
 * @property string|null $customer_name
 * @property string|null $customer_note
 * @property string|null $customer_username
 * @property string|null $customer_password
 * @property string|null $data_name
 * @property string|null $data_username
 * @property string|null $data_password
 * @property string|null $data_id
 * @property string|null $cancel_note
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \App\Models\Category $category
 * @property-read \App\Models\Invoice $invoice
 * @property-read \App\Models\Product $product
 * @property-read \App\Models\User $user
 * @method static \Illuminate\Database\Eloquent\Builder|Bill newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Bill newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Bill query()
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCancelNote($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCost($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCustomerId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCustomerName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCustomerNote($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCustomerPassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereCustomerUsername($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereDataId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereDataName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereDataPassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereDataUsername($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereInvoiceId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill wherePrice($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereProductId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Bill whereUserId($value)
 * @mixin \Eloquent
 */
class Bill extends Model
{
    use HasFactory;

    protected $guarded = [];

    protected $casts = [
        'status' => BillStatusEnum::class,
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(BillObserve::class);
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function invoice(): BelongsTo
    {
        return $this->belongsTo(Invoice::class);
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function product(): BelongsTo
    {
        return $this->belongsTo(Product::class);
    }

    public function getTotalPriceAttribute(): string
    {
        if ($this->created_at->lessThan(Carbon::create(2023, 11, 22, 23, 59))) {
            return number_format($this->price + $this->ratio, 2);
        }
        return $this->price;

    }

    public function black(): BelongsTo
    {
        return $this->belongsTo(Black::class);
    }

    public function balances(): HasMany
    {
        return $this->hasMany(Balance::class, 'bill_id');
    }

    public function points(): HasMany
    {
        return $this->hasMany(Point::class, 'bill_id');
    }
}
