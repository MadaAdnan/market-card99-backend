<?php

namespace App\Models;

use App\Enums\CurrencyEnum;
use App\Enums\ProductTypeEnum;
use App\Observers\ProductObserve;
use App\Traits\HelperMedia;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Validation\Rules\Enum;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

/**
 * App\Models\Product
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $img
 * @property string|null $info
 * @property string $cost
 * @property ProductTypeEnum|null $type
 * @property int $category_id
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property CurrencyEnum|null $currency
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Bill[] $bills
 * @property-read int|null $bills_count
 * @property-read \App\Models\Category $category
 * @property-read string $price
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Price[] $prices
 * @property-read int|null $prices_count
 * @method static \Illuminate\Database\Eloquent\Builder|Product newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Product newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Product query()
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereCategoryId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereCost($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereCurrency($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereImg($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereInfo($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Product whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class Product extends Model implements HasMedia
{
    use HasFactory, HelperMedia;

    protected $guarded = [];
    protected $withCount = [
        'items'
    ];
    protected $casts = [
        'currency' => CurrencyEnum::class,
        'type' => ProductTypeEnum::class,
        'codes_api' => 'array',
    ];
    protected $appends = [
        //'price'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(ProductObserve::class);
    }

    public function prices(): HasMany
    {
        return $this->hasMany(Price::class);
    }

    public function bills(): HasMany
    {
        return $this->hasMany(Bill::class);
    }


    public function items(): HasMany
    {
        return $this->hasMany(Item::class)->where('active', 1);
    }

    public function getTotalCostAttribute(): string
    {

        if ($this->currency->value == CurrencyEnum::TR->value) {
            $cost = number_format((float)($this->cost / Setting::first()?->usd_price ?? 1), 2);
        } else {
            $cost = $this->cost;
        }


        return $cost;

    }

    public function getPrice($user = null)
    {
        if (!auth()->check() && $user===null) {
            return 0;
        }
        if ($user === null) {

            if ($this->is_offer) {
                return $this->total_cost;
            }

            $product_by_user = auth()->user()->products()->where('products.id', $this->id)->first();

            if ($product_by_user != null) {
                return $product_by_user->pivot->price;
            }

            $cost = $this->total_cost + ($this->total_cost * auth()->user()->group->price);

            return $cost;
        }
        else {

            if ($this->is_offer) {
                return $this->total_cost;
            }

            $product_by_user = $user->products()->where('products.id', $this->id)->first();

            if ($product_by_user != null) {
                return $product_by_user->pivot->price;
            }

            $cost = $this->total_cost + ($this->total_cost * $user->group->price);

            return $cost;
        }

    }


    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function scopeActivate($query)
    {
        return $query->where('active', 1);
    }

    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'product_user')->withPivot(['price']);
    }
}
